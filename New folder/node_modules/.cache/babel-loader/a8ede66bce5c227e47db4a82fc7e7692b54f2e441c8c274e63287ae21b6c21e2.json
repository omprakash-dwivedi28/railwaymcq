{"ast":null,"code":"import React from \"react\";\nconst initial_reducer = (state, action) => {\n  // loading zone and division\n\n  if (action.type === \"GET_ZONE_AND_DIVISION_INFO_BEGIN\") {\n    return {\n      ...state,\n      zoneAndDivisionLoading: true\n    };\n  }\n  if (action.type === \"GET_ZONE_AND_DIVISION_INFO_SUCCESS\") {\n    // console.log(\"im fro globl context \", action.payload);\n    const data = action.payload;\n    return {\n      ...state,\n      zoneAndDivisionLoading: false,\n      zoneAndDivisionData: data // to insert data in mast_info []\n    };\n  }\n  if (action.type === \"GET_ZONE_AND_DIVISION_INFO_ERROR\") {\n    return {\n      ...state,\n      zoneAndDivisionLoading: false,\n      zoneAndDivisionError: true\n    };\n  }\n  if (action.type === \"ZONE\") {\n    const ZONE = action.payload.value;\n    return {\n      ...state,\n      railwayInfo: {\n        ...state.railwayInfo,\n        railway_zone: ZONE,\n        railway_division: null\n      }\n    };\n  }\n  if (action.type === \"DIVISION\") {\n    const DIVISION = action.payload.value;\n    return {\n      ...state,\n      railwayInfo: {\n        ...state.railwayInfo,\n        railway_division: DIVISION\n      }\n    };\n  }\n  throw new Error(`No Matching \"${action.type}\" - action type`);\n};\nexport default initial_reducer;","map":{"version":3,"names":["React","initial_reducer","state","action","type","zoneAndDivisionLoading","data","payload","zoneAndDivisionData","zoneAndDivisionError","ZONE","value","railwayInfo","railway_zone","railway_division","DIVISION","Error"],"sources":["C:/Users/hp/Desktop/project/test/src/context/initial_reducer.js"],"sourcesContent":["import React from \"react\";\r\n\r\nconst initial_reducer = (state, action) => {\r\n  // loading zone and division\r\n\r\n  if (action.type === \"GET_ZONE_AND_DIVISION_INFO_BEGIN\") {\r\n    return { ...state, zoneAndDivisionLoading: true };\r\n  }\r\n  if (action.type === \"GET_ZONE_AND_DIVISION_INFO_SUCCESS\") {\r\n    // console.log(\"im fro globl context \", action.payload);\r\n    const data = action.payload;\r\n\r\n    return {\r\n      ...state,\r\n      zoneAndDivisionLoading: false,\r\n      zoneAndDivisionData: data, // to insert data in mast_info []\r\n    };\r\n  }\r\n  if (action.type === \"GET_ZONE_AND_DIVISION_INFO_ERROR\") {\r\n    return {\r\n      ...state,\r\n      zoneAndDivisionLoading: false,\r\n      zoneAndDivisionError: true,\r\n    };\r\n  }\r\n\r\n  if (action.type === \"ZONE\") {\r\n    const ZONE = action.payload.value;\r\n\r\n    return {\r\n      ...state,\r\n      railwayInfo: {\r\n        ...state.railwayInfo,\r\n        railway_zone: ZONE,\r\n        railway_division: null,\r\n      },\r\n    };\r\n  }\r\n  if (action.type === \"DIVISION\") {\r\n    const DIVISION = action.payload.value;\r\n    return {\r\n      ...state,\r\n      railwayInfo: { ...state.railwayInfo, railway_division: DIVISION },\r\n    };\r\n  }\r\n  throw new Error(`No Matching \"${action.type}\" - action type`);\r\n};\r\nexport default initial_reducer;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,eAAe,GAAGA,CAACC,KAAK,EAAEC,MAAM,KAAK;EACzC;;EAEA,IAAIA,MAAM,CAACC,IAAI,KAAK,kCAAkC,EAAE;IACtD,OAAO;MAAE,GAAGF,KAAK;MAAEG,sBAAsB,EAAE;IAAK,CAAC;EACnD;EACA,IAAIF,MAAM,CAACC,IAAI,KAAK,oCAAoC,EAAE;IACxD;IACA,MAAME,IAAI,GAAGH,MAAM,CAACI,OAAO;IAE3B,OAAO;MACL,GAAGL,KAAK;MACRG,sBAAsB,EAAE,KAAK;MAC7BG,mBAAmB,EAAEF,IAAI,CAAE;IAC7B,CAAC;EACH;EACA,IAAIH,MAAM,CAACC,IAAI,KAAK,kCAAkC,EAAE;IACtD,OAAO;MACL,GAAGF,KAAK;MACRG,sBAAsB,EAAE,KAAK;MAC7BI,oBAAoB,EAAE;IACxB,CAAC;EACH;EAEA,IAAIN,MAAM,CAACC,IAAI,KAAK,MAAM,EAAE;IAC1B,MAAMM,IAAI,GAAGP,MAAM,CAACI,OAAO,CAACI,KAAK;IAEjC,OAAO;MACL,GAAGT,KAAK;MACRU,WAAW,EAAE;QACX,GAAGV,KAAK,CAACU,WAAW;QACpBC,YAAY,EAAEH,IAAI;QAClBI,gBAAgB,EAAE;MACpB;IACF,CAAC;EACH;EACA,IAAIX,MAAM,CAACC,IAAI,KAAK,UAAU,EAAE;IAC9B,MAAMW,QAAQ,GAAGZ,MAAM,CAACI,OAAO,CAACI,KAAK;IACrC,OAAO;MACL,GAAGT,KAAK;MACRU,WAAW,EAAE;QAAE,GAAGV,KAAK,CAACU,WAAW;QAAEE,gBAAgB,EAAEC;MAAS;IAClE,CAAC;EACH;EACA,MAAM,IAAIC,KAAK,CAAE,gBAAeb,MAAM,CAACC,IAAK,iBAAgB,CAAC;AAC/D,CAAC;AACD,eAAeH,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}