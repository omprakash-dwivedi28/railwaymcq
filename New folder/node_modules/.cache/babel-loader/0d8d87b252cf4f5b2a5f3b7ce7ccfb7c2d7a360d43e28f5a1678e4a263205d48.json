{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\project\\\\test\\\\src\\\\Component\\\\GlobalContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\n// Create context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const GlobalContext = /*#__PURE__*/createContext();\n\n// Create context provider\nexport const GlobalProvider = ({\n  children\n}) => {\n  _s();\n  // State for zone and division data\n  const [zoneDivisionData, setZoneDivisionData] = useState([]);\n\n  // Function to fetch zone and division data\n  const fetchZoneDivisionData = async () => {\n    try {\n      const response = await axios.get(\"https://railwaymcq.com/ohe/zone_division_api.php\");\n      setZoneDivisionData(response.data);\n    } catch (error) {\n      console.error(\"Error fetching zone and division data:\", error);\n    }\n  };\n\n  // Fetch data on component mount\n  useEffect(() => {\n    fetchZoneDivisionData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(GlobalContext.Provider, {\n    value: {\n      zoneDivisionData\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n_s(GlobalProvider, \"+B/S6bXLJFtgmMSEo7Kyv1kPEVc=\");\n_c = GlobalProvider;\nvar _c;\n$RefreshReg$(_c, \"GlobalProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","axios","jsxDEV","_jsxDEV","GlobalContext","GlobalProvider","children","_s","zoneDivisionData","setZoneDivisionData","fetchZoneDivisionData","response","get","data","error","console","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/hp/Desktop/project/test/src/Component/GlobalContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\n\r\n// Create context\r\nexport const GlobalContext = createContext();\r\n\r\n// Create context provider\r\nexport const GlobalProvider = ({ children }) => {\r\n  // State for zone and division data\r\n  const [zoneDivisionData, setZoneDivisionData] = useState([]);\r\n\r\n  // Function to fetch zone and division data\r\n  const fetchZoneDivisionData = async () => {\r\n    try {\r\n      const response = await axios.get(\r\n        \"https://railwaymcq.com/ohe/zone_division_api.php\"\r\n      );\r\n      setZoneDivisionData(response.data);\r\n    } catch (error) {\r\n      console.error(\"Error fetching zone and division data:\", error);\r\n    }\r\n  };\r\n\r\n  // Fetch data on component mount\r\n  useEffect(() => {\r\n    fetchZoneDivisionData();\r\n  }, []);\r\n\r\n  return (\r\n    <GlobalContext.Provider value={{ zoneDivisionData }}>\r\n      {children}\r\n    </GlobalContext.Provider>\r\n  );\r\n};\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AACjE,OAAOC,KAAK,MAAM,OAAO;;AAEzB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,OAAO,MAAMC,aAAa,gBAAGN,aAAa,CAAC,CAAC;;AAE5C;AACA,OAAO,MAAMO,cAAc,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC9C;EACA,MAAM,CAACC,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;;EAE5D;EACA,MAAMW,qBAAqB,GAAG,MAAAA,CAAA,KAAY;IACxC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMV,KAAK,CAACW,GAAG,CAC9B,kDACF,CAAC;MACDH,mBAAmB,CAACE,QAAQ,CAACE,IAAI,CAAC;IACpC,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAAC;IAChE;EACF,CAAC;;EAED;EACAd,SAAS,CAAC,MAAM;IACdU,qBAAqB,CAAC,CAAC;EACzB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEP,OAAA,CAACC,aAAa,CAACY,QAAQ;IAACC,KAAK,EAAE;MAAET;IAAiB,CAAE;IAAAF,QAAA,EACjDA;EAAQ;IAAAY,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACa,CAAC;AAE7B,CAAC;AAACd,EAAA,CA1BWF,cAAc;AAAAiB,EAAA,GAAdjB,cAAc;AAAA,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}